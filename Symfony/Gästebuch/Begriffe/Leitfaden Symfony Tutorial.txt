Paginator:

damit man nicht tausende von einträgen auf einer Seite hat sollte man einen paginator erstellen welcher es ermöglicht auf verschiedene Seiten umzublättern wie in einem Buch.

+use App\Entity\Conference;                                  
+use Doctrine\ORM\Tools\Pagination\Paginator;

mit der Zeile public const PAGINATOR_PER_PAGE = "..."; kann man auswählen wie viele einträge eine Seite später haben wird.

jetzt muss noch eine neue methode erstellt werden.

eine getCommentPaginator methode welche öffentlich ist, (Conference $conference, int $offset) mit einbezieht und einen Paginator returned braucht.

Nun bauen wir eine query ein die wir später auch benutzen werden um die angefragten kommentare anzuzeigen.


	$query = $this->createQueryBuilder('c')					erstellt den querybuilder namens c?
	   ->andWhere('c.conference = :conference')				sucht aus dass unsere conference Datenbank benutzt wird. c.conference =:conference zu schreiben schützt for sql injections.
	   ->setParameter('conference', $conference)				?
	   ->orderBy('c.createdAt', 'DESC')					ordnet nach erstellungsdatum also unserer createdAt klasse.
   	   ->setMaxResults(self::PAGINATOR_PER_PAGE)				wählt anhand unseres fetgelegten PAGINATOR_PER_PAGE wertes aus, wie viel einträge pro seite sein werden
	   ->setFirstResult($offset)						?
	   ->getQuery()								gibt uns die erstellte query.
	;

	return new Paginator($query);
   

Jetzt noch den ConferenceController anpassen sodass die ID route auc noch (Request $request) einbezieht.

und in diese Route methode dann 2 zeilen hinzufügen:

$offset = max(0, $request->query->getInt('offset', 0));				?
$paginator = $commentRepository->getCommentPaginator($conference, $offset); 	? erstellt $paginator welcher aus der getCommentPaginator besteht und aus dem commentRepository gezogen wird.


in der Response unsere alte weise comments anzuzeigen entfernen und das neue einfügen nämlich:

	'comments' => $paginator,									entnimmt daten aus comments und füllt diese in den paginator ein welcher dann unsere anzeige baut
	'previous' => $offset - CommentRepository::PAGINATOR_PER_PAGE,					macht den previous button welcher uns zurück leitet
	'next' => min(count($paginator), $offset + CommentRepository::PAGINATOR_PER_PAGE),		macht den next button welcher uns auf die nächste seite bringt.


zuletzt noch Twig anpassen:


	{% if comments|length > 0 %}
		<div>There are {{ comments|length }} comments.</div>

	...
	{% endfor %}

	{% if previous >= 0 %}
		<a href="{{ path('conference', { id: conference.id, offset: previous }) }}">Previous</a>
	{% endif %}
	{% if next < comments|length %}
		<a href="{{ path('conference', { id: conference.id, offset: next }) }}">Next</a>
...












